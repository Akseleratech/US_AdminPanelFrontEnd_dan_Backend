rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // ----- Common helper functions -----
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserDoc() {
      return get(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function userRole() {
      return isSignedIn() ? getUserDoc().data.role : null;
    }

    function isAdmin() {
      return userRole() == 'admin';
    }

    function isStaff() {
      return userRole() == 'staff';
    }

    function isUser() {
      return isSignedIn() && !isAdmin() && !isStaff();
    }

    function isOrderOwner() {
      return resource.data.userId == request.auth.uid;
    }
    function isOrderOwnerInRequest() {
      return request.resource.data.userId == request.auth.uid;
    }

    // ----- Global lock-down -----
    // By default, deny everything. Each collection explicitly opens what it needs.
    match /{document=**} {
      allow read, write: if false;
    }

    // ----- Settings -----
    match /settings/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin(); // only admins can change global settings
    }

    // ----- Admins management -----
    match /admins/{userId} {
      // Users can read their own admin profile. Full read for admins.
      allow read: if isAdmin() || (isSignedIn() && request.auth.uid == userId);

      // Only admins may create / update / delete admin documents
      allow create, update, delete: if isAdmin();
    }

    // ----- Reference data collections (cities, amenities, services, buildings) -----
    match /cities/{cityId} {
      allow read: if isSignedIn();
      allow write, delete: if isAdmin();
    }

    match /amenities/{amenityId} {
      allow read: if isSignedIn();
      allow write, delete: if isAdmin();
    }

    match /services/{serviceId} {
      allow read: if isSignedIn();
      allow write, delete: if isAdmin();
    }

    match /buildings/{buildingId} {
      allow read: if true; // Allow anonymous read access for mobile apps
      allow write, delete: if isAdmin();
    }

    // Added promos collection rules
    match /promos/{promoId} {
      allow read: if true; // Allow anonymous read access for mobile apps
      allow write, delete: if isAdmin();
    }

    // Added articles collection rules
    match /articles/{articleId} {
      allow read: if true; // Allow anonymous read access for mobile apps
      allow write, delete: if isAdmin();
    }

    // ----- Spaces collection -----
    // Admins: full access. Staff: allowed to manage spaces they belong to (based on cityId field)
    match /spaces/{spaceId} {
      allow read: if true; // Allow anonymous read access for mobile apps
      allow write, delete: if isAdmin() || (isStaff() && request.resource.data.cityId == getUserDoc().data.cityId);
    }

    // ----- Orders & Invoices -----
    match /orders/{orderId} {
      // All authenticated users can read their own orders; admins/staff can read all
      allow read: if isAdmin() || isStaff() || (isUser() && isOrderOwner());

      // Mobile user creates a booking order for themselves
      allow create: if isUser() && isOrderOwnerInRequest();

      // Users cannot modify an order once created; only admin/staff can update/delete
      allow update, delete: if isAdmin() || isStaff();
    }

    match /invoices/{invoiceId} {
      allow read: if isSignedIn();
      allow create, update: if isAdmin() || isStaff();
      allow delete: if isAdmin();
    }

    // ----- Customers collection -----
    match /customers/{customerId} {
      // Helper function to check if user owns this customer document
      function isCustomerOwner() {
        return isUser() && (
          resource.data.createdBy.uid == request.auth.uid ||
          resource.data.userId == request.auth.uid ||
          customerId == request.auth.uid
        );
      }

      // Helper function to check if user can create this customer document
      function canCreateCustomer() {
        // Allow both regular users (with email in token) and anonymous users (no email) to create
        // their own customer document.
        return isUser() &&
          (
            request.resource.data.createdBy.uid == request.auth.uid ||
            request.resource.data.userId == request.auth.uid ||
            customerId == request.auth.uid
          ) &&
          (
            // Case 1: Regular user – email must match token
            (request.auth.token.email != null && request.resource.data.email == request.auth.token.email) ||
            // Case 2: Anonymous sign-in – token has no email, bypass this check
            (request.auth.token.email == null)
          );
      }

      // Admins and staff have full access; users can access their own profile
      allow read: if isAdmin() || isStaff() || isCustomerOwner();

      // Standard users can update their own profile; admins/staff can update any
      allow update: if isAdmin() || isStaff() || isCustomerOwner();

      /*
       * Allow account creation from client side when:
       *  - User is signed-in (isUser())
       *  - The document's createdBy.uid or userId equals the requester's UID
       *  - OR the document ID equals the requester's UID
       *  - The email stored matches the authenticated user's email (helps prevent impersonation)
       * Admin & staff retain full rights.
       */
      allow create: if isAdmin() || isStaff() || canCreateCustomer();

      // Delete remains restricted to admin/staff only
      allow delete: if isAdmin() || isStaff();
    }
  }
} 