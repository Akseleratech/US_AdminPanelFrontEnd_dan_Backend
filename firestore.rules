rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // ----- Common helper functions -----
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserDoc() {
      return get(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function userRole() {
      return isSignedIn() ? getUserDoc().data.role : null;
    }

    function isAdmin() {
      return userRole() == 'admin';
    }

    function isStaff() {
      return userRole() == 'staff';
    }

    function isUser() {
      return isSignedIn() && !isAdmin() && !isStaff();
    }

    function isOrderOwner() {
      return resource.data.userId == request.auth.uid || resource.data.customersId == request.auth.uid;
    }
    
    function isOrderOwnerInRequest() {
      return request.resource.data.userId == request.auth.uid || request.resource.data.customersId == request.auth.uid;
    }

    // ----- Global lock-down -----
    // By default, deny everything. Each collection explicitly opens what it needs.
    match /{document=**} {
      allow read, write: if false;
    }

    // ----- Test collection for connection testing -----
    match /test/{docId} {
      allow read, write: if true; // Allow all access for testing
    }

    // ----- Settings -----
    match /settings/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin(); // only admins can change global settings
    }

    // ----- Admins management -----
    match /admins/{userId} {
      // Users can read their own admin profile. Full read for admins.
      allow read: if isAdmin() || (isSignedIn() && request.auth.uid == userId);

      // Only admins may create / update / delete admin documents
      allow create, update, delete: if isAdmin();
    }

    // ----- Reference data collections (cities, amenities, services, buildings) -----
    match /cities/{cityId} {
      allow read: if true; // Allow anonymous read access for mobile apps
      allow write, delete: if isAdmin();
    }

    match /amenities/{amenityId} {
      allow read: if true; // Allow anonymous read access for mobile apps
      allow write, delete: if isAdmin();
    }

    match /services/{serviceId} {
      allow read: if true; // Allow anonymous read access for mobile apps
      allow write, delete: if isAdmin();
    }

    match /layanans/{layananId} {
      allow read: if true; // Allow anonymous read access for mobile apps
      allow write, delete: if isAdmin();
    }

    match /buildings/{buildingId} {
      allow read: if true; // Allow anonymous read access for mobile apps
      allow write, delete: if isAdmin();
    }

    // Promos collection rules
    match /promos/{promoId} {
      allow read: if true; // Allow anonymous read access for mobile apps
      allow write, delete: if isAdmin();
    }

    // Articles collection rules
    match /articles/{articleId} {
      allow read: if true; // Allow anonymous read access for mobile apps
      allow write, delete: if isAdmin();
    }

    // ----- Spaces collection -----
    match /spaces/{spaceId} {
      allow read: if true; // Allow anonymous read access for mobile apps
      allow write, delete: if isAdmin() || (isStaff() && request.resource.data.cityId == getUserDoc().data.cityId);
    }

    // ----- Customers -----
    match /customers/{customerId} {
      // Users can read their own customer document; admins/staff can read all
      allow read: if isAdmin() || isStaff() || (isSignedIn() && (
        resource.data.createdBy.uid == request.auth.uid || 
        resource.data.uid == request.auth.uid
      ));

      // Cloud Function can create customer documents for new users
      allow create: if isAdmin() || isStaff() || (isSignedIn() && (
        request.resource.data.createdBy.uid == request.auth.uid || 
        request.resource.data.uid == request.auth.uid
      ));

      // Users can update their own customer document; admins/staff can update any
      allow update: if isAdmin() || isStaff() || (isSignedIn() && (
        resource.data.createdBy.uid == request.auth.uid || 
        resource.data.uid == request.auth.uid
      ));

      // Only admins/staff can delete customer documents
      allow delete: if isAdmin() || isStaff();
    }

    // ----- Customers collection queries -----
    match /customers/{customerId} {
      // Allow users to query customers collection by createdBy.uid or uid
      allow list: if isAdmin() || isStaff() || (isSignedIn() && (
        request.query.createdBy.uid == request.auth.uid ||
        request.query.uid == request.auth.uid
      ));
    }

    // ----- Orders & Invoices -----
    match /orders/{orderId} {
      // All authenticated users can read their own orders; admins/staff can read all
      // Also allow anonymous read for checking booking availability
      allow read: if isAdmin() || isStaff() || (isSignedIn() && isOrderOwner()) || true;

      // Mobile user creates a booking order for themselves
      allow create: if isSignedIn() && isOrderOwnerInRequest();

      // Users cannot modify an order once created; only admin/staff can update/delete
      allow update, delete: if isAdmin() || isStaff();
    }

    match /invoices/{invoiceId} {
      allow read: if isSignedIn();
      allow create, update: if isAdmin() || isStaff();
      allow delete: if isAdmin();
    }

  }
} 